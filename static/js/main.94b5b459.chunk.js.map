{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","react_default","a","createElement","className","onChange","click","type","checked","data","check","content","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCheck","id","index","state","todo","findIndex","el","arrtodo","toConsumableArray","setState","valueInput","event","text","target","value","toAthive","arrTodo","arrT","arrA","i","length","push","arr","arhivTasks","forEach","reverse","active","arrMark","map","objectSpread","visual","viewMark","viewAll","addTodo","form","Date","getTime","tec","countTask","filter","_this2","src_Todo","key","task","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94b5b459.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Todo = ( props ) => {\r\n   \r\n    return (\r\n        <div>\r\n            <input className=\"Checkbox\" onChange={() => props.click()} type=\"checkbox\" checked={ props.data.check } />\r\n            <span \r\n                className={props.data.check ? 'Marker' : ''}\r\n            >\r\n                {props.data.content}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo","import React, { Component } from 'react';\nimport Todo from './Todo'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todo: [\n        { id: 1551274974621, check: false, content: 'Доробити todo', visual: true, },\n        { id: 1551274974622, check: false, content: 'Заповнити форму як справи', visual: true, },\n      ],\n      valueInput: \"\",\n      arhivTasks: [],\n    }\n  }\n\n  render() {\n    const arrTodo = this.state.todo.map((el, index) => {\n      if (!el.visual) return null;\n      return (<Todo key={index} click={() => this.updateCheck(el.id)} data={ el } />)\n    });\n    const task = this.countTask(this.state.todo);\n\n    return (\n      <div className=\"Container\">\n        <span>Завдання {task} з {this.state.todo.length}</span><br />\n        {arrTodo}\n        <input\n          className=\"Font\" \n          placeholder=\"add...\"\n          value={this.state.valueInput}\n          onChange={(event) => this.valueInput(event)}\n          type=\"text\"\n        />\n        <button className=\"Font\" onClick={() => this.addTodo()}>Добавити</button><br />\n        <button className=\"Font\" onClick={() => this.viewMark()}>Виконані</button>\n        <button className=\"Font\" onClick={() => this.viewAll()}>Всі</button>\n        <button className=\"Font\" onClick={() => this.active()}>Завдання</button>\n        <button className=\"Font\" onClick={() => this.toAthive()}>В архів</button>\n        <hr />\n        <div className=\"Arhiv\">Архів:</div>\n        <ul className=\"Arhiv\">{ this.state.arhivTasks.map(el => <li key={el.id}>{el.content}</li>)}</ul>\n      </div>\n    )\n  }\n\n  updateCheck = (id) => {\n    const index = this.state.todo.findIndex(el => el.id === id)\n\n    let arrtodo = [...this.state.todo];\n    arrtodo[index].check = !this.state.todo[index].check;\n    \n    this.setState({ todo: arrtodo, })\n  }\n\n  valueInput = (event) => {\n    const text = event.target.value;\n    this.setState({ valueInput: text })\n  }\n\n  toAthive = () => {\n    let arrTodo = [...this.state.todo];\n    let arrT = [];\n    let arrA = [];\n    \n    for (let i = 0; i < arrTodo.length; i++) {\n      if (arrTodo[i].check === false) arrT.push(arrTodo[i]);\n      if (arrTodo[i].check === true) arrA.push(arrTodo[i])\n    }\n    let arr = [...this.state.arhivTasks];\n    arrA.forEach(el => arr.push(el));\n\n    this.setState({ \n      todo: arrT,\n      arhivTasks: arr.reverse(),\n     })\n  }\n  active = () => {\n    let arrTodo = [...this.state.todo];\n    let arrMark = [];\n\n    arrMark = arrTodo.map(el => { return {...el, visual: !el.check }})\n    arrMark = arrTodo.map(el => { return {...el, visual: !el.check }})\n       \n    this.setState({ todo: arrMark })\n  }\n  viewMark = () => {\n    let arrTodo = [...this.state.todo];\n    let arrMark = [];\n    \n    arrMark = arrTodo.map(el => { return {...el, visual: el.check }})\n    arrMark = arrTodo.map(el => { return {...el, visual: el.check }})\n    \n    this.setState({ todo: arrMark })\n  }\n\n  viewAll = () => {\n    let arrTodo = [...this.state.todo];\n    let arrMark = [];\n    for (let i = 0; i < arrTodo.length; i++) {\n      arrTodo[i].visual = true;\n      arrMark.push(arrTodo[i]);\n    }\n    this.setState({ todo: arrMark })\n  }\n  \n  addTodo = () => {\n    if (!this.state.valueInput) return;\n    const setId = new Date().getTime();\n    const form = { id: setId, check: false, content: this.state.valueInput, visual: true, };\n    let tec = [...this.state.todo];\n    tec.push(form);\n\n    this.setState({ todo: tec, valueInput: '' });\n  }\n\n  countTask = (arrtodo) => {\n    const tasks = arrtodo.filter(el => el.check === false);\n    return tasks.length;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}