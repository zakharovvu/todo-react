{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","react_default","a","createElement","className","onChange","click","type","checked","data","check","content","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCheck","id","index","state","todo","findIndex","el","arrtodo","toConsumableArray","setState","vlueInput","event","text","target","value","toAthive","arrTodo","arrT","arrA","i","length","push","arr","arhivTasks","forEach","reverse","active","arrMark","visual","viewMark","viewAll","addTodo","form","Date","getTime","tec","countTask","filter","_this2","map","src_Todo","key","task","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2cfa12f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Todo = ( props ) => {\r\n   \r\n    return (\r\n        <div>\r\n            <input className=\"Checkbox\" onChange={() => props.click()} type=\"checkbox\" checked={ props.data.check } />\r\n            <span \r\n                className={props.data.check ? 'Marker' : ''}\r\n            >\r\n                {props.data.content}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo","import React, { Component } from 'react';\nimport Todo from './Todo'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todo: [\n        { id: 1551274974621, check: false, content: 'Доробити todo', visual: true, },\n        { id: 1551274974622, check: false, content: 'Заповнити форму як справи', visual: true, },\n      ],\n      vlueInput: \"\",\n      arhivTasks: [],\n    }\n  }\n\n  render() {\n    const arrTodo = this.state.todo.map((el, index) => {\n      if (!el.visual) return null;\n      return (<Todo key={index} click={() => this.updateCheck(el.id)} data={this.state.todo[index]} />)\n    });\n    const task = this.countTask(this.state.todo);\n\n    return (\n      <div className=\"Container\">\n        <span>Завдання {task} з {this.state.todo.length}</span><br />\n        {arrTodo}\n        <input\n          className=\"Font\" \n          placeholder=\"add...\"\n          value={this.state.vlueInput}\n          onChange={(event) => this.vlueInput(event)}\n          type=\"text\"\n        />\n        <button className=\"Font\" onClick={() => this.addTodo()}>Добавити</button><br />\n        <button className=\"Font\" onClick={() => this.viewMark()}>Виконані</button>\n        <button className=\"Font\" onClick={() => this.viewAll()}>Всі</button>\n        <button className=\"Font\" onClick={() => this.active()}>Завдання</button>\n        <button className=\"Font\" onClick={() => this.toAthive()}>В архів</button>\n        <hr />\n        <div className=\"Arhiv\">Архів:</div>\n        <ul className=\"Arhiv\">{ this.state.arhivTasks.map(el => <li key={el.id}>{el.content}</li>)}</ul>\n      </div>\n    )\n  }\n\n  updateCheck = (id) => {\n    const index = this.state.todo.findIndex(el => el.id === id)\n\n    let arrtodo = [...this.state.todo];\n    arrtodo[index].check = !this.state.todo[index].check;\n    \n    this.setState({ todo: arrtodo, })\n  }\n\n  vlueInput = (event) => {\n    const text = event.target.value;\n    this.setState({ vlueInput: text })\n  }\n\n  toAthive = () => {\n    let arrTodo = [...this.state.todo];\n    let arrT = [];\n    let arrA = [];\n    \n    for (let i = 0; i < arrTodo.length; i++) {\n      if (arrTodo[i].check === false) arrT.push(arrTodo[i]);\n      if (arrTodo[i].check === true) arrA.push(arrTodo[i])\n    }\n    let arr = [...this.state.arhivTasks];\n    arrA.forEach(el => arr.push(el));\n\n    this.setState({ \n      todo: arrT,\n      arhivTasks: arr.reverse(),\n     })\n  }\n  active = () => {\n    let arrTodo = [...this.state.todo];\n    let arrMark = [];\n\n    for (let i = 0; i < arrTodo.length; i++) {\n      if (arrTodo[i].check === false) {\n        arrTodo[i].visual = true;\n        arrMark.push(arrTodo[i]);\n      } else {\n        arrTodo[i].visual = false;\n        arrMark.push(arrTodo[i]);\n      }\n    }\n    this.setState({ todo: arrMark })\n  }\n  viewMark = () => {\n    let arrTodo = [...this.state.todo];\n    let arrMark = [];\n    for (let i = 0; i < arrTodo.length; i++) {\n      if (arrTodo[i].check === true) {\n        arrTodo[i].visual = true;\n        arrMark.push(arrTodo[i]);\n      } else {\n        arrTodo[i].visual = false;\n        arrMark.push(arrTodo[i]);\n      }\n    }\n    this.setState({ todo: arrMark })\n  }\n\n  viewAll = () => {\n    let arrTodo = [...this.state.todo];\n    let arrMark = [];\n    for (let i = 0; i < arrTodo.length; i++) {\n      arrTodo[i].visual = true;\n      arrMark.push(arrTodo[i]);\n    }\n    this.setState({ todo: arrMark })\n  }\n  \n  addTodo = () => {\n    if (!this.state.vlueInput) return;\n    const setId = new Date().getTime();\n    const form = { id: setId, check: false, content: this.state.vlueInput, visual: true, };\n    let tec = [...this.state.todo];\n    tec.push(form);\n\n    this.setState({ todo: tec, vlueInput: '' });\n  }\n\n  countTask = (arrtodo) => {\n    const tasks = arrtodo.filter(el => el.check === false);\n    return tasks.length;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}